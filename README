This project is an example of building a WebDriver framework using Gradle and TestNG with InteliJ or Eclipse.

It extends the basic tutorial found on the Selenium Wiki and runs a couple of tests against Stack Overflow.

http://code.google.com/p/selenium/wiki/GettingStarted
http://code.googles.com/p/selenium/wiki/PageObjects

There are a couple of kep concepts that will help you get started

- Switching the navigation of the tests from one page object to another
- Abstracting the test setup into a BaseTest class
- Using TestNG and Gradle to run the tests

-- Creating the IDE project

InteliJ
cd ~/<checkout dir>/page-objects
./gradlew idea

Eclipse
cd ~/<checkout dir>/page-objects
./gradlew eclipse

-- Writing the Tests

I find using a Test Driven (Test) Development approach works well here.
- Write the test
- Create the Page Object Methods
- Create the Page Object Locators
- Run the test and debug until it passes

-- Building the Page Objects

You can use the PageFactory helper to define your locators

http://code.google.com/p/selenium/wiki/PageFactory

However, I prefer to store them as By objects

There are several reasons for this:

- The WebElement will get looked up each time you use the locator which can help avoid stale elememt exceptions
- You can use your locators in methods that assert the presence or absence of a WebElemnt (return driver.findElements(By.yourLocator)size() < 0)
- Personally I think they look cleaner in the code

-- Running the tests using Gradle

To run all tests
./gradlew clean test

To run only tests belonging to group 1 (as defined in the includegroup1 task in build.gradle)
./gradlew clean includegroup1

To run only tests not belonging to group 1 (as defined in the excludegroup1 task in build.gradle)
./gradlew clean excludegroup1